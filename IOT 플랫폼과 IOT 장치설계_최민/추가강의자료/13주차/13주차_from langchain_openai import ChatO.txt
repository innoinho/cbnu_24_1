#from langchain_openai import ChatOpenAI
from langchain_community.chat_models import ChatOllama

# model
#llm = ChatOpenAI(model="gpt-3.5-turbo-0125")
llm = ChatOllama(model="EEVE-Korean-Instruct-8B:latest")

# chain 실행
llm.invoke("지구의 자전 주기는?")

#from langchain_openai import ChatOpenAI
from langchain_community.chat_models import ChatOllama
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate

# model
#llm = ChatOpenAI(model="gpt-3.5-turbo-0125")
llm = ChatOllama(model="EEVE-Korean-Instruct-8B:latest")

prompt = ChatPromptTemplate.from_template("{topic}에 대하여 설명해줘")

chain = prompt | llm | StrOutputParser()

# chain 실행
print(chain.invoke({"topic" : "deep learning"}))

#from langchain_openai import ChatOpenAI
from langchain_community.chat_models import ChatOllama
from langchain_core.output_parsers import StrOutputParser
#from langchain_core.prompts import ChatPromptTemplate
from langchain_core.prompts import PromptTemplate

from langchain_core.output_parsers import CommaSeparatedListOutputParser


# model
#llm = ChatOpenAI(model="gpt-3.5-turbo-0125")
llm = ChatOllama(model="EEVE-Korean-Instruct-8B:latest")

output_parser = CommaSeparatedListOutputParser()
format_instructions = output_parser.get_format_instructions()

#prompt = ChatPromptTemplate.from_template("{topic}에 대하여 설명해줘")
prompt = PromptTemplate(
    template="List five {subject}.\n{format_instructions}",
    input_variables=["subject"],
    partial_variables={"format_instructions": format_instructions},
)

chain = prompt | llm | output_parser

print(chain.invoke({"subject": "popular Korean cusine"}))


# chain 실행
#print(chain.invoke({"topic" : "deep learning"}))

from langchain_community.document_loaders import PyPDFLoader

pdf_filepath = '000660_SK_2023.pdf'
loader = PyPDFLoader(pdf_filepath)
pages = loader.load()

print(len(pages))
print(pages[10])

#pip install BeautifulSoup4

from langchain_community.document_loaders import PyPDFLoader
from langchain_community.document_loaders import WebBaseLoader

url = 'https://namu.wiki/w/LLaMA'
loader = WebBaseLoader(url)

docs = loader.load()

print(len(docs))
print(docs[0].page_content)
#print(docs[0].page_content[5000:6000])

from langchain_community.document_loaders import PyPDFLoader
from langchain_community.document_loaders import WebBaseLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter

url = 'https://namu.wiki/w/LLaMA'
loader = WebBaseLoader(url)

docs = loader.load()

print(len(docs))
print(docs[0].page_content)
#print(docs[0].page_content[5000:6000])


text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
splits = text_splitter.split_documents(docs)

print(len(splits))
print(splits[10])

#pip install langchain_openai

#pip install chromadb



from langchain_community.document_loaders import PyPDFLoader
from langchain_community.document_loaders import WebBaseLoader
#from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.text_splitter import CharacterTextSplitter
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import Chroma
import os


url = 'https://ko.wikipedia.org/wiki/LLaMA'
loader = WebBaseLoader(url)

docs = loader.load()

print(len(docs))
print(docs[0].page_content)
#print(docs[0].page_content[5000:6000])


#text_splitter = RecursiveCharacterTextSplitter(chunk_size=100, chunk_overlap=50)
text_splitter = CharacterTextSplitter(
    separator = ' ',
    chunk_size=100,
    chunk_overlap=50,
    length_function = len,
)
splits = text_splitter.split_documents(docs)

os.environ["OPENAI_API_KEY"] = "___________________본인 OPENAI API Key __________________"
api_key = os.getenv("OPENAI_API_KEY")

vectorstore = Chroma.from_documents(documents = splits,
                                    embedding=OpenAIEmbeddings(openai_api_key=api_key))

docs = vectorstore.similarity_search("유사도")
print(len(docs))
print(docs[0].page_content)











#pdf_filepath = '000660_SK_2023.pdf'
#loader = PyPDFLoader(pdf_filepath)
#pages = loader.load()

#print(len(pages))
#print(pages[10])