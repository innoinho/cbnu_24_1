from durable.lang import *

with ruleset('재고관리'):
    # 재고 수준이 낮을 때 알림
    @when_all(m.수량 < 10)
    def 재고부족(c):
        c.post({'유형': '경고', '메시지': '품목 {}의 재고가 부족합니다'.format(c.m.품목)})

    # 재고가 없을 때 알림
    @when_all(m.수량 == 0)
    def 재고없음(c):
        c.post({'유형': '경고', '메시지': '품목 {}의 재고가 없습니다'.format(c.m.품목)})

    # 재고가 충분할 때 알림
    @when_all(m.수량 >= 50)
    def 재고충분(c):
        c.post({'유형': '정보', '메시지': '품목 {}의 재고가 충분합니다'.format(c.m.품목)})

    # 새로운 재고가 추가될 때
    @when_all(m.동작 == '추가')
    def 재고추가(c):
        # 재고 추가 로직
        print('{} 개의 품목 {}에 추가되었습니다'.format(c.m.수량, c.m.품목))

    # 재고가 판매될 때
    @when_all(m.동작 == '판매')
    def 재고판매(c):
        # 재고 판매 로직
        print('{} 개의 품목 {}이 판매되었습니다'.format(c.m.수량, c.m.품목))

    # 재고가 반환될 때
    @when_all(m.동작 == '반환')
    def 재고반환(c):
        # 재고 반환 로직
        print('{} 개의 품목 {}이 반환되었습니다'.format(c.m.수량, c.m.품목))


# 규칙을 테스트하기 위한 사실 확인
assert_fact('재고관리', {'품목': '태양 충전기', '수량': 6, '동작': '추가'})
assert_fact('재고관리', {'품목': '12345', '수량': 0, '동작': '판매'})

# 재고가 추가되었다는 사실 확인
assert_fact('재고관리', {'동작': '추가', '수량': 20, '품목': 'A'})

# 재고가 판매되었다는 사실 확인
assert_fact('재고관리', {'동작': '판매', '수량': 5, '품목': 'B'})

# 재고가 반환되었다는 사실 확인
assert_fact('재고관리', {'동작': '반환', '수량': 10, '품목': 'C'})

